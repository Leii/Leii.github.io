<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leii&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://leii.me/"/>
  <updated>2016-09-14T13:29:52.000Z</updated>
  <id>http://leii.me/</id>
  
  <author>
    <name>Leii</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hybrid 笔记</title>
    <link href="http://leii.me/2016/09/09/Hybrid-%E7%AC%94%E8%AE%B0/"/>
    <id>http://leii.me/2016/09/09/Hybrid-笔记/</id>
    <published>2016-09-09T08:35:25.000Z</published>
    <updated>2016-09-14T13:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hybrid App优势明显，发版不用审核，页面可以随时调整和修复，通用于3个平台节省开发成本等，很多公司都在用，类型主要分Web主体型、多View混合型、单View混合型。</p>
<p>我们公司则经历了从最早的Web主体型APP向多view混合型的过渡，公司早期人员少，业务变化快的情况下，业务代码都放在前端非常方便，不过后期随着用户量的增多，对性能和用户体验开始精益求精，将部分高频的页面native化。</p>
<p>与H5的交互在实现上除了最常用的webview的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hybrid App优势明显，发版不用审核，页面可以随时调整和修复，通用于3个平台节省开发成本等，很多公司都在用，类型主要分Web主体型、多View混合型、单View混合型。&lt;/p&gt;
&lt;p&gt;我们公司则经历了从最早的Web主体型APP向多view混合型的过渡，公司早期人员少，
    
    </summary>
    
      <category term="iOS" scheme="http://leii.me/categories/iOS/"/>
    
    
      <category term="笔记" scheme="http://leii.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>iOS常用判断</title>
    <link href="http://leii.me/2016/06/12/iOS%E5%B8%B8%E7%94%A8%E5%88%A4%E6%96%AD/"/>
    <id>http://leii.me/2016/06/12/iOS常用判断/</id>
    <published>2016-06-12T09:26:25.000Z</published>
    <updated>2016-09-12T14:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>[用到就记录下来…]</p>
<h4 id="判断一个对象中是否包含某个属性"><a href="#判断一个对象中是否包含某个属性" class="headerlink" title="判断一个对象中是否包含某个属性"></a>判断一个对象中是否包含某个属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (BOOL) getVariableWithClass:(Class) myClass varName:(NSString *)name&#123;       </div><div class="line">	unsigned int outCount, i;</div><div class="line">  	Ivar *ivars = class_copyIvarList(myClass, &amp;outCount);</div><div class="line">  	for (i = 0; i &lt; outCount; i++) &#123;</div><div class="line">    	Ivar property = ivars[i];</div><div class="line">    	NSString *keyName = [NSString 		stringWithCString:ivar_getName(property) encoding:NSUTF8StringEncoding];</div><div class="line">	    keyName = [keyName stringByReplacingOccurrencesOfString:@&quot;_&quot; withString:@&quot;&quot;];</div><div class="line">    	if ([keyName isEqualToString:name]) &#123;</div><div class="line">      	return YES;</div><div class="line">    	&#125;</div><div class="line">  	&#125;</div><div class="line">  	return NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断字符串是否为纯数字组成"><a href="#判断字符串是否为纯数字组成" class="headerlink" title="判断字符串是否为纯数字组成"></a>判断字符串是否为纯数字组成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)isPureInt:(NSString*)string&#123;</div><div class="line">    NSScanner* scan = [NSScanner scannerWithString:string];</div><div class="line">    int val;</div><div class="line">    return[scan scanInt:&amp;val] &amp;&amp; [scan isAtEnd];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="判断当天是星期几"><a href="#判断当天是星期几" class="headerlink" title="判断当天是星期几"></a>判断当天是星期几</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)weekDayJudge</div><div class="line">&#123;</div><div class="line">    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];</div><div class="line">    NSDate *now;</div><div class="line">    NSDateComponents *comps = [[NSDateComponents alloc] init];</div><div class="line">    NSInteger unitFlags =NSCalendarUnitYear | NSCalendarUnitMonth | NSCalendarUnitDay | NSCalendarUnitWeekday |</div><div class="line">    NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond;</div><div class="line">    now=[NSDate date];</div><div class="line">    comps = [calendar components:unitFlags fromDate:now];</div><div class="line"></div><div class="line">    NSLog(@&quot;weekday is %ld&quot;,(long)[comps weekday]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="iOS-判断是否开启定位"><a href="#iOS-判断是否开启定位" class="headerlink" title="iOS 判断是否开启定位"></a>iOS 判断是否开启定位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isLocationServiceOpen &#123;</div><div class="line">    if ([ CLLocationManager authorizationStatus] == kCLAuthorizationStatusDenied) &#123;</div><div class="line">        return NO;</div><div class="line">    &#125; else</div><div class="line">        return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="iOS-判断是否允许消息通知"><a href="#iOS-判断是否允许消息通知" class="headerlink" title="iOS 判断是否允许消息通知"></a>iOS 判断是否允许消息通知</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)isMessageNotificationServiceOpen &#123;</div><div class="line">    if (SYSTEM_VERSION_GREATER_THAN(@&quot;8.0&quot;)) &#123;</div><div class="line">        return [[UIApplication sharedApplication] isRegisteredForRemoteNotifications];</div><div class="line">    &#125; else &#123;</div><div class="line">        return UIRemoteNotificationTypeNone != [[UIApplication sharedApplication] enabledRemoteNotificationTypes];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="获取当前屏幕最顶层显示的viewcontroller"><a href="#获取当前屏幕最顶层显示的viewcontroller" class="headerlink" title="获取当前屏幕最顶层显示的viewcontroller"></a>获取当前屏幕最顶层显示的viewcontroller</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (UIViewController *)getPresentedViewController</div><div class="line">&#123;</div><div class="line">    UIViewController *appRootVC = [UIApplication sharedApplication].keyWindow.rootViewController;</div><div class="line">    UIViewController *topVC = appRootVC;</div><div class="line">    if (topVC.presentedViewController) &#123;</div><div class="line">        topVC = topVC.presentedViewController;</div><div class="line">    &#125;</div><div class="line">    return topVC;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[用到就记录下来…]&lt;/p&gt;
&lt;h4 id=&quot;判断一个对象中是否包含某个属性&quot;&gt;&lt;a href=&quot;#判断一个对象中是否包含某个属性&quot; class=&quot;headerlink&quot; title=&quot;判断一个对象中是否包含某个属性&quot;&gt;&lt;/a&gt;判断一个对象中是否包含某个属性&lt;/h4&gt;&lt;fi
    
    </summary>
    
      <category term="iOS" scheme="http://leii.me/categories/iOS/"/>
    
    
      <category term="笔记" scheme="http://leii.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Info.plist中常用的key</title>
    <link href="http://leii.me/2016/06/11/Info-plist%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84key/"/>
    <id>http://leii.me/2016/06/11/Info-plist中常用的key/</id>
    <published>2016-06-11T10:23:29.000Z</published>
    <updated>2016-09-12T09:22:14.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>Key</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>App Transport Security</td>
<td style="text-align:left">iOS9新增，如果不设置NSAllowsArbitraryLoads将默认强制使用了HTTPS协议进行传输</td>
</tr>
<tr>
<td>UIRequiresPersistentWiFi</td>
<td style="text-align:left">在程序中弹出wifi选择的key（系统设置中需要将wifi提示打开）</td>
</tr>
<tr>
<td>UIAppFonts</td>
<td style="text-align:left">内嵌字体</td>
</tr>
<tr>
<td>UIApplicationExitsOnSuspend</td>
<td style="text-align:left">程序是否在后台运行</td>
</tr>
<tr>
<td>UIBackgroundModes</td>
<td style="text-align:left">后台运行时的服务，具体看iOS4的后台介绍</td>
</tr>
<tr>
<td>UIDeviceFamily</td>
<td style="text-align:left">设备集合,array类型</td>
</tr>
<tr>
<td>UIFileSharingEnabled</td>
<td style="text-align:left">开启itunes共享document文件夹</td>
</tr>
<tr>
<td>UILaunchImageFile</td>
<td style="text-align:left">启动页图片</td>
</tr>
<tr>
<td>UIPrerenderedIcon</td>
<td style="text-align:left">icon上是否有高光</td>
</tr>
<tr>
<td>UIRequiredDeviceCapabilities</td>
<td style="text-align:left">设备需要的功能</td>
</tr>
<tr>
<td>UIStatusBarHidden</td>
<td style="text-align:left">状态栏隐藏（和程序内的区别是在于显示Default.png已经生效）</td>
</tr>
<tr>
<td>UIStatusBarStyle</td>
<td style="text-align:left">状态栏类型</td>
</tr>
<tr>
<td>UIViewEdgeAntialiasing</td>
<td style="text-align:left">是否开启抗锯齿</td>
</tr>
<tr>
<td>CFBundleDisplayName</td>
<td style="text-align:left">app显示名</td>
</tr>
<tr>
<td>CFBundleIconFile</td>
<td style="text-align:left">图标</td>
</tr>
<tr>
<td>CFBundleName</td>
<td style="text-align:left">app显示名短名16个字符以内</td>
</tr>
<tr>
<td>CFBundleVersion</td>
<td style="text-align:left">版本</td>
</tr>
<tr>
<td>CFBundleURLTypes</td>
<td style="text-align:left">自定义url，用于利用url弹回程序</td>
</tr>
<tr>
<td>CFBundleLocalizations</td>
<td style="text-align:left">本地资源的本地化语言，用于itunes页面左下角显示本地话语种</td>
</tr>
<tr>
<td>CFBundleDevelopmentRegion</td>
<td style="text-align:left">也是本地化相关，如果用户所在地没有相应的语言资源，则用这个key的value来作为默认</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;App Transport Security&lt;/td&gt;
&lt;td style=
    
    </summary>
    
      <category term="iOS" scheme="http://leii.me/categories/iOS/"/>
    
    
      <category term="笔记" scheme="http://leii.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>OC之@property</title>
    <link href="http://leii.me/2016/06/04/OC%E4%B9%8B-property/"/>
    <id>http://leii.me/2016/06/04/OC之-property/</id>
    <published>2016-06-04T14:13:51.000Z</published>
    <updated>2016-09-17T03:46:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>OC的@property本质是一种支持快捷访问成员变量的方法，自动生成setter和getter方法。</p>
<p>声明：在@interface 里声明</p>
<p>声明格式 @property (attributes) type propertyName;</p>
<p>合成：在.m文件里合成</p>
<p>合成格式 @synthesize name = _name;(自动合成，Xcode4.4之后版本不需要写，系统会自动合成)或通过@dynamic，自己</p>
<p>访问权限：在.h中声明成员变量，默认是protected，在.m文件中声明默认是private的。</p>
<p>@synthesize  propertyName = _name；如果变量_name没有声明，系统会自动生成该成员变量且为private权限。如果_name已声明，它们会自动合成。</p>
<p>默认读取方法名为-(type)name 和 -(void)setName也可以改变setter和getter的访问名称。</p>
<p>如：@property  (setter=setMyValue, getter=getBool) NSInteger  value; 此时setValue的方法就会被覆盖。</p>
<h4 id="property的修饰属性-attributes"><a href="#property的修饰属性-attributes" class="headerlink" title="@property的修饰属性(attributes)"></a>@property的修饰属性(attributes)</h4><p>可读性：readwrite/readonly，不写默认为readwrite</p>
<pre><code>readwrite：同时生成setter与getter方法
readonly：只生成getter方法
</code></pre><p>原子性：nonatomic/atomic，不写默认是atomic</p>
<pre><code>atomic：线程安全，表示多线程中只有一个线程能对它访问
nonatomic：非线程安全，但访问速度快
</code></pre><p>内存：assign/retain/copy/weak/strong/unsafe_unretaunied</p>
<p>（Xcode4.2(iOS sdk4.3和以下版本)和以前的版本用retain和assign<br>　　Xcode4.3(iOS 5和以上版本)或之后有了ARC用strong和weak）</p>
<pre><code>assign：简单赋值，不更改引用计数，基础数据类型(如NSInteger,CGFloat)和C数据类型(如int,float)的默认值，非ARC的默认值
retain：使用了引用计数，retain+1，release-1，当引用计数为0时，调用dealloc，内存释放
copy：用于非共享内存，每个指针有自己的内存空间
weak：只作用于ARC,不更改引用计数，作用于对象，当引用计数为0时会将对象置为nil
strong：只作用于ARC，引用计数加1，是对象的默认值
unsafe_unretained：作用于ARC，功能与assign一样，引用计数为0时不会置为nil，可能出现野指针，所以不安全
</code></pre><p>Nullability Annotations：nonnull/nullable/null_resettable，多数为nonnull，包在NS_ASSUME_NONNULL_BEGIN与NS_ASSUME_NONNULL_END中间的默认为nonnull</p>
<p>（llvm 6.1 Xcode6.3中加入，表示是否可以为nil或者NULL，对应swift的？ ！）</p>
<pre><code>nonnull：不能为空
nullable：可以为空
null_resettable：表示 setter nullable，但是 getter nonnull，如@property (null_resettable, nonatomic, strong) UIView *view; 可以被设为nil，但是getter的时候会调用-loadView创建一个非nil的view
</code></pre><p> 为了安全起见，苹果还制定了几条规则：</p>
<blockquote>
<p>1.typedef定义的类型的nullability特性通常依赖于上下文，即使是在Audited Regions中，也不能假定它为nonnull。</p>
<p>2.复杂的指针类型(如id <em>)必须显示去指定是nonnull还是nullable。例如，指定一个指向nullable对象的nonnull指针，可以使用”__nullable id </em> __nonnull”。</p>
<p>3.我们经常使用的NSError **通常是被假定为一个指向nullable NSError对象的nullable指针。</p>
</blockquote>
<p>Nullability Annotations的兼容性：</p>
<blockquote>
<p>1.老代码仍然能正常工作，即使对nonnull对象使用了nil也没有问题。</p>
<p>2.老代码在需要和swift混编时，在新的swift编译器下会给出一个警告。</p>
<p>3.nonnull不会影响性能。事实上，我们仍然可以在运行时去判断我们的对象是否为nil。</p>
<p>事实上，我们可以将nonnull/nullable与我们的断言和异常一起看待，其需要处理的问题都是同一个：违反约定是一个程序员的错误。特别是，返回值是我们可控的东西，如果返回值是nonnull的，则我们不应该返回nil，除非是为了向后兼容。</p>
</blockquote>
<h4 id="声明临时变量"><a href="#声明临时变量" class="headerlink" title="声明临时变量"></a>声明临时变量</h4><p>用<strong>strong,  </strong>weak, <strong>unsafe_unretained,  </strong>autoreleasing等，用法与上面一样</p>
<p><strong>autoreleasing用法介绍：可以使对象延迟释放。通过传递</strong>autoreleaseing的对象，可以做到在函数内部申请空间，函数外部也可以使用。具体的释放时间取决于runloop创建的autorelease pool，如果autorelease pool释放，则__autorelease 声明的变量都会被释放。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OC的@property本质是一种支持快捷访问成员变量的方法，自动生成setter和getter方法。&lt;/p&gt;
&lt;p&gt;声明：在@interface 里声明&lt;/p&gt;
&lt;p&gt;声明格式 @property (attributes) type propertyName;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="iOS" scheme="http://leii.me/categories/iOS/"/>
    
    
      <category term="格物" scheme="http://leii.me/tags/%E6%A0%BC%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>[转]http的session与cookie</title>
    <link href="http://leii.me/2016/06/03/%E8%BD%AC-http%E7%9A%84session%E4%B8%8Ecookie/"/>
    <id>http://leii.me/2016/06/03/转-http的session与cookie/</id>
    <published>2016-06-03T14:05:54.000Z</published>
    <updated>2016-09-15T14:39:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>摘要：虽然session机制在web应用程序中被采用已经很长时间了，但是仍然有很多人不清楚session机制的本质，以至不能正确的应用这一技术。本文将详细讨论session的工作机制并且对在Java web application中应用session机制时常见的问题作出解答。 </p>
<p>目录： </p>
<p>一、术语session </p>
<p>二、HTTP协议与状态保持 </p>
<p>三、理解cookie机制 </p>
<p>四、理解session机制 </p>
<p>五、理解javax.servlet.http.HttpSession </p>
<p>六、HttpSession常见问题 </p>
<p>七、跨应用程序的session共享 </p>
<p>八、总结 </p>
<p>参考文档 </p>
<p>一、术语session </p>
<p>在我的经验里，session这个词被滥用的程度大概仅次于transaction，更加有趣的是transaction与session在某些语境下的含义是相同的。 </p>
<p>session，中文经常翻译为会话，其本来的含义是指有始有终的一系列动作/消息，比如打电话时从拿起电话拨号到挂断电话这中间的一系列过程可以称之为一个 session。有时候我们可以看到这样的话“在一个浏览器会话期间，…”，这里的会话一词用的就是其本义，是指从一个浏览器窗口打开到关闭这个期间 ①。最混乱的是“用户（客户端）在一次会话期间”这样一句话，它可能指用户的一系列动作（一般情况下是同某个具体目的相关的一系列动作，比如从登录到选购商品到结账登出这样一个网上购物的过程，有时候也被称为一个transaction），然而有时候也可能仅仅是指一次连接，也有可能是指含义①，其中的差别只能靠上下文来推断②。 </p>
<p>然而当session一词与网络协议相关联时，它又往往隐含了“面向连接”和/或“保持状态”这样两个含义， “面向连接”指的是在通信双方在通信之前要先建立一个通信的渠道，比如打电话，直到对方接了电话通信才能开始，与此相对的是写信，在你把信发出去的时候你并不能确认对方的地址是否正确，通信渠道不一定能建立，但对发信人来说，通信已经开始了。“保持状态”则是指通信的一方能够把一系列的消息关联起来，使得消息之间可以互相依赖，比如一个服务员能够认出再次光临的老顾客并且记得上次这个顾客还欠店里一块钱。这一类的例子有“一个TCP session”或者 “一个POP3 session”③。 </p>
<p>而到了web服务器蓬勃发展的时代，session在web开发语境下的语义又有了新的扩展，它的含义是指一类用来在客户端与服务器之间保持状态的解决方案④。有时候session也用来指这种解决方案的存储结构，如“把xxx保存在session 里”⑤。由于各种用于web开发的语言在一定程度上都提供了对这种解决方案的支持，所以在某种特定语言的语境下，session也被用来指代该语言的解决方案，比如经常把Java里提供的javax.servlet.http.HttpSession简称为session⑥。</p>
<p>鉴于这种混乱已不可改变，本文中session一词的运用也会根据上下文有不同的含义，请大家注意分辨。<br>在本文中，使用中文“浏览器会话期间”来表达含义①，使用“session机制”来表达含义④，使用“session”表达含义⑤，使用具体的“HttpSession”来表达含义⑥ </p>
<p>二、HTTP协议与状态保持 </p>
<p>HTTP 协议本身是无状态的，这与HTTP协议本来的目的是相符的，客户端只需要简单的向服务器请求下载某些文件，无论是客户端还是服务器都没有必要纪录彼此过去的行为，每一次请求之间都是独立的，好比一个顾客和一个自动售货机或者一个普通的（非会员制）大卖场之间的关系一样。 </p>
<p>然而聪明（或者贪心？）的人们很快发现如果能够提供一些按需生成的动态信息会使web变得更加有用，就像给有线电视加上点播功能一样。这种需求一方面迫使HTML逐步添加了表单、脚本、DOM等客户端行为，另一方面在服务器端则出现了CGI规范以响应客户端的动态请求，作为传输载体的HTTP协议也添加了文件上载、 cookie这些特性。其中cookie的作用就是为了解决HTTP协议无状态的缺陷所作出的努力。至于后来出现的session机制则是又一种在客户端与服务器之间保持状态的解决方案。 </p>
<p>让我们用几个例子来描述一下cookie和session机制之间的区别与联系。笔者曾经常去的一家咖啡店有喝5杯咖啡免费赠一杯咖啡的优惠，然而一次性消费5杯咖啡的机会微乎其微，这时就需要某种方式来纪录某位顾客的消费数量。想象一下其实也无外乎下面的几种方案： </p>
<p>1、该店的店员很厉害，能记住每位顾客的消费数量，只要顾客一走进咖啡店，店员就知道该怎么对待了。这种做法就是协议本身支持状态。 </p>
<p>2、发给顾客一张卡片，上面记录着消费的数量，一般还有个有效期限。每次消费时，如果顾客出示这张卡片，则此次消费就会与以前或以后的消费相联系起来。这种做法就是在客户端保持状态。 </p>
<p>3、发给顾客一张会员卡，除了卡号之外什么信息也不纪录，每次消费时，如果顾客出示该卡片，则店员在店里的纪录本上找到这个卡号对应的纪录添加一些消费信息。这种做法就是在服务器端保持状态。 </p>
<p>由于HTTP协议是无状态的，而出于种种考虑也不希望使之成为有状态的，因此，后面两种方案就成为现实的选择。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。同时我们也看到，由于采用服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上它还有其他选择。 </p>
<p>三、理解cookie机制<br>cookie机制的基本原理就如上面的例子一样简单，但是还有几个问题需要解决：“会员卡”如何分发；“会员卡”的内容；以及客户如何使用“会员卡”。 </p>
<p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。 </p>
<p>而cookie 的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。意思是麦当劳的会员卡只能在麦当劳的店里出示，如果某家分店还发行了自己的会员卡，那么进这家店的时候除了要出示麦当劳的会员卡，还要出示这家店的会员卡。 </p>
<p>cookie的内容主要包括：名字，值，过期时间，路径和域。 </p>
<p>其中域可以指定某一个域比如.google.com，相当于总店招牌，比如宝洁公司，也可以指定一个域下的具体某台机器比如www.google.com或者froogle.google.com，可以用飘柔来做比。<br>路径就是跟在域名后面的URL路径，比如/或者/foo等等，可以用某飘柔专柜做比。<br>路径与域合在一起就构成了cookie的作用范围。 </p>
<p>如果不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。这种生命期为浏览器会话期的 cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。 </p>
<p>存储在硬盘上的cookie 可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。对于IE，在一个打开的窗口上按 Ctrl-N（或者从文件菜单）打开的窗口可以与原窗口共享，而使用其他方式新开的IE进程则不能共享已经打开的窗口的内存cookie；对于 Mozilla Firefox0.8，所有的进程和标签页都可以共享同样的cookie。一般来说是用javascript的window.open打开的窗口会与原窗口共享内存cookie。浏览器对于会话cookie的这种只认cookie不认人的处理方式经常给采用session机制的web应用程序开发者造成很大的困扰。 </p>
<p>下面就是一个goolge设置cookie的响应头的例子 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP/1.1 302 Found </div><div class="line">Location: http://www.google.com/intl/zh-CN/ </div><div class="line">Set-Cookie: PREF=ID=0565f77e132de138:NW=1:TM=1098082649:LM=1098082649: </div><div class="line">S=KaeaCFPo49RiA_d8; expires=Sun, 17-Jan-2038 19:14:07 GMT; path=/; domain=.google.com </div><div class="line">Content-Type: text/html</div></pre></td></tr></table></figure>
<p>这是使用HTTPLook这个HTTP Sniffer软件来俘获的HTTP通讯纪录的一部分 </p>
<p>浏览器在再次访问goolge的资源时自动向外发送cookie </p>
<p>使用Firefox可以很容易的观察现有的cookie的值<br>使用HTTPLook配合Firefox可以很容易的理解cookie的工作原理。 </p>
<p>IE也可以设置在接受cookie前询问 </p>
<p>这是一个询问接受cookie的对话框。 </p>
<p>四、理解session机制<br>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。 </p>
<p>当程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否已包含了一个session标识 - 称为 session id，如果已包含一个session id则说明以前已经为此客户端创建过session，服务器就按照session id把这个 session检索出来使用（如果检索不到，可能会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个 session id将被在本次响应中返回给客户端保存。 </p>
<p>保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发挥给服务器。一般这个cookie的名字都是类似于SEEESIONID，而。比如weblogic对于web应用程序生成的cookie，JSESSIONID= ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764，它的名字就是 JSESSIONID。 </p>
<p>由于cookie可以被人为的禁止，必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面，附加方式也有两种，一种是作为URL路径的附加信息，表现形式为<a href="http://...../xxx;jsessionid=" target="_blank" rel="external">http://...../xxx;jsessionid=</a><br>ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764<br>另一种是作为查询字符串附加在URL后面，表现形式为<a href="http://...../xxx?jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764" target="_blank" rel="external">http://...../xxx?jsessionid=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764</a><br>这两种方式对于用户来说是没有区别的，只是服务器在解析的时候处理的方式不同，采用第一种方式也有利于把session id的信息和正常程序参数区分开来。<br>为了在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个session id。 </p>
<p>另一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。比如下面的表单 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;form name=&quot;testform&quot; action=&quot;/xxx&quot;&gt; </div><div class="line">&lt;input type=&quot;text&quot;&gt; </div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>在被传递给客户端之前将被改写成 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form name=&quot;testform&quot; action=&quot;/xxx&quot;&gt; </div><div class="line">&lt;input type=&quot;hidden&quot; name=&quot;jsessionid&quot; </div><div class="line">value=&quot;ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764&quot;&gt; </div><div class="line">&lt;input type=&quot;text&quot;&gt; </div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>
<p>这种技术现在已较少应用，笔者接触过的很古老的iPlanet6(SunONE应用服务器的前身)就使用了这种技术。<br>实际上这种技术可以简单的用对action应用URL重写来代替。 </p>
<p>在谈论session机制的时候，常常听到这样一种误解“只要关闭浏览器，session就消失了”。其实可以想象一下会员卡的例子，除非顾客主动对店家提出销卡，否则店家绝对不会轻易删除顾客的资料。对session来说也是一样的，除非程序通知服务器删除一个session，否则服务器会一直保留，程序一般都是在用户做log off的时候发个指令去删除session。然而浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭，之所以会有这种错觉，是大部分session机制都使用会话cookie来保存session id，而关闭浏览器后这个 session id就消失了，再次连接服务器时也就无法找到原来的session。如果服务器设置的cookie被保存到硬盘上，或者使用某种手段改写浏览器发出的HTTP请求头，把原来的session id发送给服务器，则再次打开浏览器仍然能够找到原来的session。 </p>
<p>恰恰是由于关闭浏览器不会导致session被删除，迫使服务器为seesion设置了一个失效时间，当距离客户端上一次使用session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才会把session删除以节省存储空间。 </p>
<p>五、理解javax.servlet.http.HttpSession </p>
<p>HttpSession是Java平台对session机制的实现规范，因为它仅仅是个接口，具体到每个web应用服务器的提供商，除了对规范支持之外，仍然会有一些规范里没有规定的细微差异。这里我们以BEA的Weblogic Server8.1作为例子来演示。 </p>
<p>首先，Weblogic Server提供了一系列的参数来控制它的HttpSession的实现，包括使用cookie的开关选项，使用URL重写的开关选项，session持久化的设置，session失效时间的设置，以及针对cookie的各种设置，比如设置cookie的名字、路径、域， cookie的生存时间等。 </p>
<p>一般情况下，session都是存储在内存里，当服务器进程被停止或者重启的时候，内存里的session也会被清空，如果设置了session的持久化特性，服务器就会把session保存到硬盘上，当服务器进程重新启动或这些信息将能够被再次使用， Weblogic Server支持的持久性方式包括文件、数据库、客户端cookie保存和复制。 </p>
<p>复制严格说来不算持久化保存，因为session实际上还是保存在内存里，不过同样的信息被复制到各个cluster内的服务器进程中，这样即使某个服务器进程停止工作也仍然可以从其他进程中取得session。 </p>
<p>cookie生存时间的设置则会影响浏览器生成的cookie是否是一个会话cookie。默认是使用会话cookie。有兴趣的可以用它来试验我们在第四节里提到的那个误解。 </p>
<p>cookie的路径对于web应用程序来说是一个非常重要的选项，Weblogic Server对这个选项的默认处理方式使得它与其他服务器有明显的区别。后面我们会专题讨论。 </p>
<p>关于session的设置参考[5] <a href="http://e-docs.bea.com/wls/docs70/webapp/weblogic_xml.html#1036869" target="_blank" rel="external">http://e-docs.bea.com/wls/docs70/webapp/weblogic_xml.html#1036869</a> </p>
<p>六、HttpSession常见问题 </p>
<p>（在本小节中session的含义为⑤和⑥的混合） </p>
<p>1、session在何时被创建 </p>
<p>一个常见的误解是以为session在有客户端访问时就被创建，然而事实是直到某server端程序调用 HttpServletRequest.getSession(true)这样的语句时才被创建，注意如果JSP没有显示的使用 &lt;% @page session=”false”%&gt; 关闭session，则JSP文件在编译成Servlet时将会自动加上这样一条语句 HttpSession session = HttpServletRequest.getSession(true);这也是JSP中隐含的 session对象的来历。 </p>
<p>由于session会消耗内存资源，因此，如果不打算使用session，应该在所有的JSP中关闭它。 </p>
<p>2、session何时被删除 </p>
<p>综合前面的讨论，session在下列情况下被删除a.程序调用HttpSession.invalidate();或b.距离上一次收到客户端发送的session id时间间隔超过了session的超时设置;或c.服务器进程被停止（非持久session） </p>
<p>3、如何做到在浏览器关闭时删除session </p>
<p>严格的讲，做不到这一点。可以做一点努力的办法是在所有的客户端页面里使用javascript代码window.oncolose来监视浏览器的关闭动作，然后向服务器发送一个请求来删除session。但是对于浏览器崩溃或者强行杀死进程这些非常规手段仍然无能为力。 </p>
<p>4、有个HttpSessionListener是怎么回事 </p>
<p>你可以创建这样的listener去监控session的创建和销毁事件，使得在发生这样的事件时你可以做一些相应的工作。注意是session的创建和销毁动作触发listener，而不是相反。类似的与HttpSession有关的listener还有 HttpSessionBindingListener，HttpSessionActivationListener和 HttpSessionAttributeListener。 </p>
<p>5、存放在session中的对象必须是可序列化的吗 </p>
<p>不是必需的。要求对象可序列化只是为了session能够在集群中被复制或者能够持久保存或者在必要时server能够暂时把session交换出内存。在 Weblogic Server的session中放置一个不可序列化的对象在控制台上会收到一个警告。我所用过的某个iPlanet版本如果 session中有不可序列化的对象，在session销毁时会有一个Exception，很奇怪。 </p>
<p>6、如何才能正确的应付客户端禁止cookie的可能性 </p>
<p>对所有的URL使用URL重写，包括超链接，form的action，和重定向的URL，具体做法参见[6]<br><a href="http://e-docs.bea.com/wls/docs70/webapp/sessions.html#100770" target="_blank" rel="external">http://e-docs.bea.com/wls/docs70/webapp/sessions.html#100770</a> </p>
<p>7、开两个浏览器窗口访问应用程序会使用同一个session还是不同的session</p>
<p>参见第三小节对cookie的讨论，对session来说是只认id不认人，因此不同的浏览器，不同的窗口打开方式以及不同的cookie存储方式都会对这个问题的答案有影响。 </p>
<p>8、如何防止用户打开两个浏览器窗口操作导致的session混乱</p>
<p>这个问题与防止表单多次提交是类似的，可以通过设置客户端的令牌来解决。就是在服务器每次生成一个不同的id返回给客户端，同时保存在session里，客户端提交表单时必须把这个id也返回服务器，程序首先比较返回的id与保存在session里的值是否一致，如果不一致则说明本次操作已经被提交过了。可以参看《J2EE核心模式》关于表示层模式的部分。需要注意的是对于使用javascript window.open打开的窗口，一般不设置这个id，或者使用单独的id，以防主窗口无法操作，建议不要再window.open打开的窗口里做修改操作，这样就可以不用设置。 </p>
<p>9、为什么在Weblogic Server中改变session的值后要重新调用一次session.setValue </p>
<p>做这个动作主要是为了在集群环境中提示Weblogic Server session中的值发生了改变，需要向其他服务器进程复制新的session值。 </p>
<p>10、为什么session不见了 </p>
<p>排除session正常失效的因素之外，服务器本身的可能性应该是微乎其微的，虽然笔者在iPlanet6SP1加若干补丁的Solaris版本上倒也遇到过；浏览器插件的可能性次之，笔者也遇到过3721插件造成的问题；理论上防火墙或者代理服务器在cookie处理上也有可能会出现问题。<br>出现这一问题的大部分原因都是程序的错误，最常见的就是在一个应用程序中去访问另外一个应用程序。我们在下一节讨论这个问题。 </p>
<p>七、跨应用程序的session共享 </p>
<p>常常有这样的情况，一个大项目被分割成若干小项目开发，为了能够互不干扰，要求每个小项目作为一个单独的web应用程序开发，可是到了最后突然发现某几个小项目之间需要共享一些信息，或者想使用session来实现SSO(single sign on)，在session中保存login的用户信息，最自然的要求是应用程序间能够访问彼此的session。 </p>
<p>然而按照Servlet规范，session的作用范围应该仅仅限于当前应用程序下，不同的应用程序之间是不能够互相访问对方的session的。各个应用服务器从实际效果上都遵守了这一规范，但是实现的细节却可能各有不同，因此解决跨应用程序session共享的方法也各不相同。 </p>
<p>首先来看一下Tomcat是如何实现web应用程序之间session的隔离的，从 Tomcat设置的cookie路径来看，它对不同的应用程序设置的cookie路径是不同的，这样不同的应用程序所用的session id是不同的，因此即使在同一个浏览器窗口里访问不同的应用程序，发送给服务器的session id也可以是不同的。 </p>
<p>根据这个特性，我们可以推测Tomcat中session的内存结构大致如下。 </p>
<p>笔者以前用过的iPlanet也采用的是同样的方式，估计SunONE与iPlanet之间不会有太大的差别。对于这种方式的服务器，解决的思路很简单，实际实行起来也不难。要么让所有的应用程序共享一个session id，要么让应用程序能够获得其他应用程序的session id。 </p>
<p>iPlanet中有一种很简单的方法来实现共享一个session id，那就是把各个应用程序的cookie路径都设为/（实际上应该是/NASApp，对于应用程序来讲它的作用相当于根）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;session-info&gt; </div><div class="line">&lt;path&gt;/NASApp&lt;/path&gt; </div><div class="line">&lt;/session-info&gt;</div></pre></td></tr></table></figure>
<p>需要注意的是，操作共享的session应该遵循一些编程约定，比如在session attribute名字的前面加上应用程序的前缀，使得 setAttribute(“name”, “neo”)变成setAttribute(“app1.name”, “neo”)，以防止命名空间冲突，导致互相覆盖。 </p>
<p>在Tomcat中则没有这么方便的选择。在Tomcat版本3上，我们还可以有一些手段来共享session。对于版本4以上的Tomcat，目前笔者尚未发现简单的办法。只能借助于第三方的力量，比如使用文件、数据库、JMS或者客户端cookie，URL参数或者隐藏字段等手段。 </p>
<p>我们再看一下Weblogic Server是如何处理session的。 </p>
<p>从截屏画面上可以看到Weblogic Server对所有的应用程序设置的cookie的路径都是/，这是不是意味着在Weblogic Server中默认的就可以共享session了呢？然而一个小实验即可证明即使不同的应用程序使用的是同一个session，各个应用程序仍然只能访问自己所设置的那些属性。这说明Weblogic Server中的session的内存结构可能如下 </p>
<p>对于这样一种结构，在 session机制本身上来解决session共享的问题应该是不可能的了。除了借助于第三方的力量，比如使用文件、数据库、JMS或者客户端 cookie，URL参数或者隐藏字段等手段，还有一种较为方便的做法，就是把一个应用程序的session放到ServletContext中，这样另外一个应用程序就可以从ServletContext中取得前一个应用程序的引用。示例代码如下， </p>
<p>应用程序A </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">context.setAttribute(&quot;appA&quot;, session);</div></pre></td></tr></table></figure>
<p>应用程序B </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">contextA = context.getContext(&quot;/appA&quot;); </div><div class="line">HttpSession sessionA = (HttpSession)contextA.getAttribute(&quot;appA&quot;);</div></pre></td></tr></table></figure>
<p>值得注意的是这种用法不可移植，因为根据ServletContext的JavaDoc，应用服务器可以处于安全的原因对于context.getContext(“/appA”);返回空值，以上做法在Weblogic Server 8.1中通过。 </p>
<p>那么Weblogic Server为什么要把所有的应用程序的cookie路径都设为/呢？原来是为了SSO，凡是共享这个session的应用程序都可以共享认证的信息。一个简单的实验就可以证明这一点，修改首先登录的那个应用程序的描述符weblogic.xml，把cookie路径修改为/appA 访问另外一个应用程序会重新要求登录，即使是反过来，先访问cookie路径为/的应用程序，再访问修改过路径的这个，虽然不再提示登录，但是登录的用户信息也会丢失。注意做这个实验时认证方式应该使用FORM，因为浏览器和web服务器对basic认证方式有其他的处理方式，第二次请求的认证不是通过 session来实现的。</p>
<p>具体请参看[7] secion 14.8 Authorization，你可以修改所附的示例程序来做这些试验。</p>
<p>八、总结 </p>
<p>session机制本身并不复杂，然而其实现和配置上的灵活性却使得具体情况复杂多变。这也要求我们不能把仅仅某一次的经验或者某一个浏览器，服务器的经验当作普遍适用的经验，而是始终需要具体情况具体分析。 </p>
<p>摘要：虽然session机制在web应用程序中被采用已经很长时间了，但是仍然有很多人不清楚session机制的本质，以至不能正确的应用这一技术。本文将详细讨论session的工作机制并且对在Java web application中应用session机制时常见的问题作出解答</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;摘要：虽然session机制在web应用程序中被采用已经很长时间了，但是仍然有很多人不清楚session机制的本质，以至不能正确的应用这一技术。本文将详细讨论session的工作机制并且对在Java web application中应用session机制时常见的问题作出解答
    
    </summary>
    
    
      <category term="转" scheme="http://leii.me/tags/%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>苹果高德百度定位坐标转换</title>
    <link href="http://leii.me/2016/06/03/%E8%8B%B9%E6%9E%9C%E9%AB%98%E5%BE%B7%E7%99%BE%E5%BA%A6%E5%AE%9A%E4%BD%8D%E5%9D%90%E6%A0%87%E8%BD%AC%E6%8D%A2/"/>
    <id>http://leii.me/2016/06/03/苹果高德百度定位坐标转换/</id>
    <published>2016-06-03T12:41:28.000Z</published>
    <updated>2016-09-13T08:02:15.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="苹果的CLLocationManager定位得到的是世界标准地理坐标-WGS-84"><a href="#苹果的CLLocationManager定位得到的是世界标准地理坐标-WGS-84" class="headerlink" title="苹果的CLLocationManager定位得到的是世界标准地理坐标(WGS-84)"></a>苹果的CLLocationManager定位得到的是世界标准地理坐标(WGS-84)</h4><h4 id="高德SDK定位得到的是火星坐标（GCJ-02）"><a href="#高德SDK定位得到的是火星坐标（GCJ-02）" class="headerlink" title="高德SDK定位得到的是火星坐标（GCJ-02）"></a>高德SDK定位得到的是火星坐标（GCJ-02）</h4><h4 id="百度SDK定位得到的是百度地理坐标（BD-09）"><a href="#百度SDK定位得到的是百度地理坐标（BD-09）" class="headerlink" title="百度SDK定位得到的是百度地理坐标（BD-09）"></a>百度SDK定位得到的是百度地理坐标（BD-09）</h4><p>有的项目里因为老的代码或者第三方库用的SDK不一样，也可能后端使用的定位SDK更换，都会需要坐标的转换来兼容老版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line">#define LAT_OFFSET_0(x,y) -100.0 + 2.0 * x + 3.0 * y + 0.2 * y * y + 0.1 * x * y + 0.2 * sqrt(fabs(x))  </div><div class="line">#define LAT_OFFSET_1 (20.0 * sin(6.0 * x * M_PI) + 20.0 * sin(2.0 * x * M_PI)) * 2.0 / 3.0  </div><div class="line">#define LAT_OFFSET_2 (20.0 * sin(y * M_PI) + 40.0 * sin(y / 3.0 * M_PI)) * 2.0 / 3.0  </div><div class="line">#define LAT_OFFSET_3 (160.0 * sin(y / 12.0 * M_PI) + 320 * sin(y * M_PI / 30.0)) * 2.0 / 3.0  </div><div class="line">  </div><div class="line">#define LON_OFFSET_0(x,y) 300.0 + x + 2.0 * y + 0.1 * x * x + 0.1 * x * y + 0.1 * sqrt(fabs(x))  </div><div class="line">#define LON_OFFSET_1 (20.0 * sin(6.0 * x * M_PI) + 20.0 * sin(2.0 * x * M_PI)) * 2.0 / 3.0  </div><div class="line">#define LON_OFFSET_2 (20.0 * sin(x * M_PI) + 40.0 * sin(x / 3.0 * M_PI)) * 2.0 / 3.0  </div><div class="line">#define LON_OFFSET_3 (150.0 * sin(x / 12.0 * M_PI) + 300.0 * sin(x / 30.0 * M_PI)) * 2.0 / 3.0  </div><div class="line">  </div><div class="line">#define RANGE_LON_MAX 137.8347  </div><div class="line">#define RANGE_LON_MIN 72.004  </div><div class="line">#define RANGE_LAT_MAX 55.8271  </div><div class="line">#define RANGE_LAT_MIN 0.8293  </div><div class="line">// jzA = 6378245.0, 1/f = 298.3  </div><div class="line">// b = a * (1 - f)  </div><div class="line">// ee = (a^2 - b^2) / a^2;  </div><div class="line">#define jzA 6378245.0  </div><div class="line">#define jzEE 0.00669342162296594323  </div><div class="line">  </div><div class="line">  </div><div class="line">  </div><div class="line">//判断是不是在中国  </div><div class="line">+(BOOL)isLocationOutOfChina:(CLLocationCoordinate2D)location  </div><div class="line">&#123;  </div><div class="line">    if (location.longitude &lt; 72.004 || location.longitude &gt; 137.8347 || location.latitude &lt; 0.8293 || location.latitude &gt; 55.8271)  </div><div class="line">        return YES;  </div><div class="line">    return NO;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (double)transformLat:(double)x BDLon:(double)y  </div><div class="line">&#123;  </div><div class="line">    double ret = LAT_OFFSET_0(x, y);  </div><div class="line">    ret += LAT_OFFSET_1;  </div><div class="line">    ret += LAT_OFFSET_2;  </div><div class="line">    ret += LAT_OFFSET_3;  </div><div class="line">    return ret;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (double)transformLon:(double)x BDLon:(double)y  </div><div class="line">&#123;  </div><div class="line">    double ret = LON_OFFSET_0(x, y);  </div><div class="line">    ret += LON_OFFSET_1;  </div><div class="line">    ret += LON_OFFSET_2;  </div><div class="line">    ret += LON_OFFSET_3;  </div><div class="line">    return ret;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (BOOL)outOfChina:(double)lat BDLon:(double)lon  </div><div class="line">&#123;  </div><div class="line">    if (lon &lt; RANGE_LON_MIN || lon &gt; RANGE_LON_MAX)  </div><div class="line">        return true;  </div><div class="line">    if (lat &lt; RANGE_LAT_MIN || lat &gt; RANGE_LAT_MAX)  </div><div class="line">        return true;  </div><div class="line">    return false;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)GCJ02Encrypt:(double)ggLat BDLon:(double)ggLon  </div><div class="line">&#123;  </div><div class="line">    CLLocationCoordinate2D resPoint;  </div><div class="line">    double mgLat;  </div><div class="line">    double mgLon;  </div><div class="line">    if ([self outOfChina:ggLat BDLon:ggLon]) &#123;  </div><div class="line">        resPoint.latitude = ggLat;  </div><div class="line">        resPoint.longitude = ggLon;  </div><div class="line">        return resPoint;  </div><div class="line">    &#125;  </div><div class="line">    double dLat = [self transformLat:(ggLon - 105.0)BDLon:(ggLat - 35.0)];  </div><div class="line">    double dLon = [self transformLon:(ggLon - 105.0) BDLon:(ggLat - 35.0)];  </div><div class="line">    double radLat = ggLat / 180.0 * M_PI;  </div><div class="line">    double magic = sin(radLat);  </div><div class="line">    magic = 1 - jzEE * magic * magic;  </div><div class="line">    double sqrtMagic = sqrt(magic);  </div><div class="line">    dLat = (dLat * 180.0) / ((jzA * (1 - jzEE)) / (magic * sqrtMagic) * M_PI);  </div><div class="line">    dLon = (dLon * 180.0) / (jzA / sqrtMagic * cos(radLat) * M_PI);  </div><div class="line">    mgLat = ggLat + dLat;  </div><div class="line">    mgLon = ggLon + dLon;  </div><div class="line">      </div><div class="line">    resPoint.latitude = mgLat;  </div><div class="line">    resPoint.longitude = mgLon;  </div><div class="line">    return resPoint;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)GCJ02Decrypt:(double)gjLat gjLon:(double)gjLon &#123;  </div><div class="line">    CLLocationCoordinate2D  gPt = [self GCJ02Encrypt:gjLat BDLon:gjLon];  </div><div class="line">    double dLon = gPt.longitude - gjLon;  </div><div class="line">    double dLat = gPt.latitude - gjLat;  </div><div class="line">    CLLocationCoordinate2D pt;  </div><div class="line">    pt.latitude = gjLat - dLat;  </div><div class="line">    pt.longitude = gjLon - dLon;  </div><div class="line">    return pt;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)BD09Decrypt:(double)BDLat BDLon:(double)BDLon  </div><div class="line">&#123;  </div><div class="line">    CLLocationCoordinate2D GCJPt;  </div><div class="line">    double x = BDLon - 0.0065, y = BDLat - 0.006;  </div><div class="line">    double z = sqrt(x * x + y * y) - 0.00002 * sin(y * M_PI);  </div><div class="line">    double theta = atan2(y, x) - 0.000003 * cos(x * M_PI);  </div><div class="line">    GCJPt.longitude = z * cos(theta);  </div><div class="line">    GCJPt.latitude = z * sin(theta);  </div><div class="line">    return GCJPt;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+(CLLocationCoordinate2D)BD09Encrypt:(double)ggLat BDLon:(double)ggLon  </div><div class="line">&#123;  </div><div class="line">    CLLocationCoordinate2D BDPt;  </div><div class="line">    double x = ggLon, y = ggLat;  </div><div class="line">    double z = sqrt(x * x + y * y) + 0.00002 * sin(y * M_PI);  </div><div class="line">    double theta = atan2(y, x) + 0.000003 * cos(x * M_PI);  </div><div class="line">    BDPt.longitude = z * cos(theta) + 0.0065;  </div><div class="line">    BDPt.latitude = z * sin(theta) + 0.006;  </div><div class="line">    return BDPt;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">//6种转换</div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)WGS84ToGCJ02:(CLLocationCoordinate2D)location  </div><div class="line">&#123;  </div><div class="line">    return [self GCJ02Encrypt:location.latitude BDLon:location.longitude];  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)GCJ02ToWGS84:(CLLocationCoordinate2D)location  </div><div class="line">&#123;  </div><div class="line">    return [self GCJ02Decrypt:location.latitude gjLon:location.longitude];  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)WGS84ToBD09:(CLLocationCoordinate2D)location  </div><div class="line">&#123;  </div><div class="line">    CLLocationCoordinate2D GCJ02Pt = [self GCJ02Encrypt:location.latitude  </div><div class="line">                                                  BDLon:location.longitude];  </div><div class="line">    return [self BD09Encrypt:GCJ02Pt.latitude BDLon:GCJ02Pt.longitude] ;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)GCJ02ToBD09:(CLLocationCoordinate2D)location  </div><div class="line">&#123;  </div><div class="line">    return  [self BD09Encrypt:location.latitude BDLon:location.longitude];  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)BD09ToGCJ02:(CLLocationCoordinate2D)location  </div><div class="line">&#123;  </div><div class="line">    return [self BD09Decrypt:location.latitude BDLon:location.longitude];  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line">+ (CLLocationCoordinate2D)BD09ToWGS84:(CLLocationCoordinate2D)location  </div><div class="line">&#123;  </div><div class="line">    CLLocationCoordinate2D GCJ02 = [self BD09ToGCJ02:location];  </div><div class="line">    return [self GCJ02Decrypt:GCJ02.latitude gjLon:GCJ02.longitude];  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;苹果的CLLocationManager定位得到的是世界标准地理坐标-WGS-84&quot;&gt;&lt;a href=&quot;#苹果的CLLocationManager定位得到的是世界标准地理坐标-WGS-84&quot; class=&quot;headerlink&quot; title=&quot;苹果的CLLocat
    
    </summary>
    
      <category term="iOS" scheme="http://leii.me/categories/iOS/"/>
    
    
      <category term="笔记" scheme="http://leii.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>大学时的渣画</title>
    <link href="http://leii.me/2016/05/18/%E5%A4%A7%E5%AD%A6%E6%97%B6%E7%9A%84%E6%B8%A3%E7%94%BB/"/>
    <id>http://leii.me/2016/05/18/大学时的渣画/</id>
    <published>2016-05-18T11:39:42.000Z</published>
    <updated>2016-09-14T13:45:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>好怀念当初在校自己做手游找不到美术，然后一手键盘一手数位板的日子，虽然一直没有什么进步也没时间系统的学一下 ╮(╯_╰)╭  </p>
<p><img src="http://imglf2.nosdn.127.net/img/SnJLZEdtSzE0OVJrRWZFS1FsSmhHNE9lUnlXUnhDTEQ.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg"></p>
<p><img src="http://imglf1.nosdn.127.net/img/SnJLZEdtSzE0OVRFblo1aGh4aE0rUUhSUkgyM2RhUVY.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好怀念当初在校自己做手游找不到美术，然后一手键盘一手数位板的日子，虽然一直没有什么进步也没时间系统的学一下 ╮(╯_╰)╭  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://imglf2.nosdn.127.net/img/SnJLZEdtSzE0OVJrRWZFS1Fs
    
    </summary>
    
      <category term="Design" scheme="http://leii.me/categories/Design/"/>
    
    
  </entry>
  
  <entry>
    <title>开张</title>
    <link href="http://leii.me/2016/05/17/%E5%BC%80%E5%BC%A0/"/>
    <id>http://leii.me/2016/05/17/开张/</id>
    <published>2016-05-17T01:04:15.000Z</published>
    <updated>2016-09-13T08:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间突然心血来潮画了这两张公司LOGO的同人画，唉~毕业了两年第一次翻出数位板，居然还没有坏，感觉像是和多年不见的老朋友又见面了，感慨万千，虽然画的还是这么渣不过这种创作的快感依然不减，以后码代码的时间需要平衡一下了，毕竟多维的人生才更有乐趣。</p>
<p>CSDN简书博客园显然技术氛围太浓分享技术以外的东西都感觉很违和，以后各种类型的作品都可以放在这个个人博客里了哈哈哈</p>
<p><img src="http://imglf1.nosdn.127.net/img/SnJLZEdtSzE0OVFaSzRVL1RTWXVaVm9KZ2xtdDJ5VVoyT0dhd3pWWmxXbVVxSUc0SmRrdG5RPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg"></p>
<p><img src="http://imglf.nosdn.127.net/img/SnJLZEdtSzE0OVFaSzRVL1RTWXVaZGNhRmdYWGlsOGIwbEhPY052ZnhRZ0VZeDhxeU1acDJRPT0.jpg?imageView&thumbnail=1680x0&quality=96&stripmeta=0&type=jpg"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间突然心血来潮画了这两张公司LOGO的同人画，唉~毕业了两年第一次翻出数位板，居然还没有坏，感觉像是和多年不见的老朋友又见面了，感慨万千，虽然画的还是这么渣不过这种创作的快感依然不减，以后码代码的时间需要平衡一下了，毕竟多维的人生才更有乐趣。&lt;/p&gt;
&lt;p&gt;CSDN简
    
    </summary>
    
      <category term="Design" scheme="http://leii.me/categories/Design/"/>
    
    
  </entry>
  
</feed>
